// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "MorningStarUI.h"
/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * $Id: MorningStarUI.fl,v 1.13 2004/05/13 18:37:49 xpxqx Exp $
 *
 * Copyright (c) 2002 - 2004 Sean McInerney
 * All rights reserved.
 *
 * See Copyright.txt or http://vtkfltk.sourceforge.net/Copyright.html
 * for details.
 *
 *    This software is distributed WITHOUT ANY WARRANTY; without even 
 *    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
 *    PURPOSE.  See the above copyright notice for more information.
 *
 */
#include "Fl_VTK_Window.H"
#include "vtkObjectFactory.h"
static const char* instructions =
"<key>: <action>\n"
"    3: toggle stereo mode\n"
"  j|t: toggle  joystick | trackball modes\n"
"  w|s: toggle wireframe | surface modes\n"
"  c|a: toggle    camera | actor modes\n"
"    p: pick\n"
"    r: reset"; 
/* fool fluid */
//vtkCxxRevisionMacro (MorningStarUI, "$Revision: 1.13 $");
/* fool fluid */
vtkStandardNewMacro (MorningStarUI);

void MorningStarUI::cb_mConeWindow_i(Fl_Double_Window*, void*) {
  exit(0);
}
void MorningStarUI::cb_mConeWindow(Fl_Double_Window* o, void* v) {
  ((MorningStarUI*)(o->user_data()))->cb_mConeWindow_i(o,v);
}

void MorningStarUI::cb_show_i(Fl_Button*, void*) {
  this->ShowMace();
}
void MorningStarUI::cb_show(Fl_Button* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_show_i(o,v);
}

void MorningStarUI::cb_hide_i(Fl_Button*, void*) {
  this->HideMace();
}
void MorningStarUI::cb_hide(Fl_Button* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_hide_i(o,v);
}

void MorningStarUI::cb_show1_i(Fl_Button*, void*) {
  this->mConeView->show();
}
void MorningStarUI::cb_show1(Fl_Button* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_show1_i(o,v);
}

void MorningStarUI::cb_hide1_i(Fl_Button*, void*) {
  this->mConeView->hide();
}
void MorningStarUI::cb_hide1(Fl_Button* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_hide1_i(o,v);
}

void MorningStarUI::cb_quit_i(Fl_Button*, void*) {
  exit(0);
}
void MorningStarUI::cb_quit(Fl_Button* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_quit_i(o,v);
}

void MorningStarUI::cb_mThetaSlider_i(Fl_Value_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetThetaResolution(int(this->mThetaSlider->value()));
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mThetaSlider(Fl_Value_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mThetaSlider_i(o,v);
}

void MorningStarUI::cb_mPhiSlider_i(Fl_Value_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetPhiResolution(int(this->mPhiSlider->value()));
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mPhiSlider(Fl_Value_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mPhiSlider_i(o,v);
}

void MorningStarUI::cb_mResSlider_i(Fl_Value_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeResolution(int(this->mResSlider->value()));
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mResSlider(Fl_Value_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mResSlider_i(o,v);
}

void MorningStarUI::cb_mRadiusSlider_i(Fl_Value_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeRadius(this->mRadiusSlider->value());
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mRadiusSlider(Fl_Value_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mRadiusSlider_i(o,v);
}

void MorningStarUI::cb_mHeightSlider_i(Fl_Value_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeHeight(this->mHeightSlider->value());
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mHeightSlider(Fl_Value_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mHeightSlider_i(o,v);
}

void MorningStarUI::cb_mScaleRoller_i(Fl_Roller*, void*) {
  if(this->Mace != NULL) {
  this->SetScaleFactor(this->mScaleRoller->value());
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mScaleRoller(Fl_Roller* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->user_data()))->cb_mScaleRoller_i(o,v);
}

void MorningStarUI::cb_mRedSphereSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSphereColor( this->mRedSphereSlider->value(),
                               this->mGreenSphereSlider->value(),
                               this->mBlueSphereSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mRedSphereSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mRedSphereSlider_i(o,v);
}

void MorningStarUI::cb_mGreenSphereSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSphereColor( this->mRedSphereSlider->value(),
                               this->mGreenSphereSlider->value(),
                               this->mBlueSphereSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mGreenSphereSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mGreenSphereSlider_i(o,v);
}

void MorningStarUI::cb_mBlueSphereSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSphereColor( this->mRedSphereSlider->value(),
                               this->mGreenSphereSlider->value(),
                               this->mBlueSphereSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mBlueSphereSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mBlueSphereSlider_i(o,v);
}

void MorningStarUI::cb_mSphereOpacitySlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSphereOpacity(this->mSphereOpacitySlider->value());
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mSphereOpacitySlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mSphereOpacitySlider_i(o,v);
}

void MorningStarUI::cb_mRedSpikeSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeColor( this->mRedSpikeSlider->value(),
                              this->mGreenSpikeSlider->value(),
                              this->mBlueSpikeSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mRedSpikeSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mRedSpikeSlider_i(o,v);
}

void MorningStarUI::cb_mGreenSpikeSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeColor( this->mRedSpikeSlider->value(),
                              this->mGreenSpikeSlider->value(),
                              this->mBlueSpikeSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mGreenSpikeSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mGreenSpikeSlider_i(o,v);
}

void MorningStarUI::cb_mBlueSpikeSlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeColor( this->mRedSpikeSlider->value(),
                              this->mGreenSpikeSlider->value(),
                              this->mBlueSpikeSlider->value() );
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mBlueSpikeSlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mBlueSpikeSlider_i(o,v);
}

void MorningStarUI::cb_mSpikeOpacitySlider_i(Fl_Slider*, void*) {
  if(this->Mace != NULL) {
  this->SetSpikeOpacity(this->mSpikeOpacitySlider->value());
  this->UpdateMaceView();
};
}
void MorningStarUI::cb_mSpikeOpacitySlider(Fl_Slider* o, void* v) {
  ((MorningStarUI*)(o->parent()->parent()->parent()->user_data()))->cb_mSpikeOpacitySlider_i(o,v);
}

MorningStarUI::MorningStarUI() {
  { mConeWindow = new Fl_Double_Window(430, 160, "MorningStar");
    mConeWindow->box(FL_PLASTIC_THIN_DOWN_BOX);
    mConeWindow->callback((Fl_Callback*)cb_mConeWindow, (void*)(this));
    mConeWindow->align(Fl_Align(FL_ALIGN_CENTER));
    { mConeView = new Fl_VTK_Window(315, 5, 110, 150);
      mConeView->box(FL_NO_BOX);
      mConeView->color(FL_BACKGROUND_COLOR);
      mConeView->selection_color(FL_BACKGROUND_COLOR);
      mConeView->labeltype(FL_NORMAL_LABEL);
      mConeView->labelfont(0);
      mConeView->labelsize(14);
      mConeView->labelcolor(FL_FOREGROUND_COLOR);
      mConeView->align(Fl_Align(FL_ALIGN_CENTER));
      mConeView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(mConeView);
    } // Fl_VTK_Window* mConeView
    { Fl_Group* o = new Fl_Group(5, 5, 305, 150);
      { Fl_Box* o = mInstructionsBox = new Fl_Box(5, 5, 305, 100);
        mInstructionsBox->box(FL_PLASTIC_UP_BOX);
        mInstructionsBox->labelfont(4);
        mInstructionsBox->labelsize(12);
        mInstructionsBox->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        Fl_Group::current()->resizable(mInstructionsBox);
        o->label(instructions);
      } // Fl_Box* mInstructionsBox
      { Fl_Group* o = new Fl_Group(5, 110, 305, 45);
        o->box(FL_PLASTIC_UP_BOX);
        { Fl_Button* o = new Fl_Button(10, 115, 50, 35, "show mace");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)2);
          o->selection_color((Fl_Color)10);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_show);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(65, 115, 50, 35, "hide mace");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)4);
          o->selection_color((Fl_Color)12);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_hide);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(120, 115, 50, 35, "show cone");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)2);
          o->selection_color((Fl_Color)10);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_show1);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(175, 115, 50, 35, "hide cone");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)4);
          o->selection_color((Fl_Color)12);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)cb_hide1);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Box* o = new Fl_Box(230, 115, 20, 35);
          o->labeltype(FL_NO_LABEL);
          o->hide();
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Button* o = new Fl_Button(255, 115, 50, 35, "quit");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)1);
          o->selection_color((Fl_Color)9);
          o->labelfont(1);
          o->callback((Fl_Callback*)cb_quit);
          o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    mConeWindow->end();
  } // Fl_Double_Window* mConeWindow
  { mMaceWindow = new Fl_Double_Window(300, 420, "MorningStar");
    mMaceWindow->box(FL_PLASTIC_THIN_DOWN_BOX);
    mMaceWindow->user_data((void*)(this));
    mMaceWindow->align(Fl_Align(FL_ALIGN_CENTER));
    { mMaceView = new Fl_VTK_Window(5, 5, 290, 290);
      mMaceView->box(FL_NO_BOX);
      mMaceView->color(FL_BACKGROUND_COLOR);
      mMaceView->selection_color(FL_BACKGROUND_COLOR);
      mMaceView->labeltype(FL_NORMAL_LABEL);
      mMaceView->labelfont(0);
      mMaceView->labelsize(14);
      mMaceView->labelcolor(FL_FOREGROUND_COLOR);
      mMaceView->align(Fl_Align(FL_ALIGN_CENTER));
      mMaceView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(mMaceView);
    } // Fl_VTK_Window* mMaceView
    { Fl_Group* o = new Fl_Group(5, 300, 290, 116);
      o->box(FL_PLASTIC_UP_BOX);
      { mThetaSlider = new Fl_Value_Slider(38, 305, 108, 16, "theta");
        mThetaSlider->type(1);
        mThetaSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
        mThetaSlider->labelfont(1);
        mThetaSlider->labelsize(10);
        mThetaSlider->minimum(3);
        mThetaSlider->maximum(64);
        mThetaSlider->step(1);
        mThetaSlider->value(8);
        mThetaSlider->callback((Fl_Callback*)cb_mThetaSlider);
        mThetaSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* mThetaSlider
      { mPhiSlider = new Fl_Value_Slider(38, 323, 108, 16, "phi");
        mPhiSlider->type(1);
        mPhiSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
        mPhiSlider->labelfont(1);
        mPhiSlider->labelsize(10);
        mPhiSlider->minimum(3);
        mPhiSlider->maximum(64);
        mPhiSlider->step(1);
        mPhiSlider->value(8);
        mPhiSlider->callback((Fl_Callback*)cb_mPhiSlider);
        mPhiSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* mPhiSlider
      { mResSlider = new Fl_Value_Slider(38, 341, 108, 16, "res");
        mResSlider->type(1);
        mResSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
        mResSlider->labelfont(1);
        mResSlider->labelsize(10);
        mResSlider->minimum(1);
        mResSlider->maximum(48);
        mResSlider->step(1);
        mResSlider->value(8);
        mResSlider->callback((Fl_Callback*)cb_mResSlider);
        mResSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* mResSlider
      { mRadiusSlider = new Fl_Value_Slider(184, 305, 108, 16, "radius");
        mRadiusSlider->type(1);
        mRadiusSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
        mRadiusSlider->labelfont(1);
        mRadiusSlider->labelsize(10);
        mRadiusSlider->maximum(8);
        mRadiusSlider->value(0.5);
        mRadiusSlider->callback((Fl_Callback*)cb_mRadiusSlider);
        mRadiusSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* mRadiusSlider
      { mHeightSlider = new Fl_Value_Slider(184, 323, 108, 16, "height");
        mHeightSlider->type(1);
        mHeightSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
        mHeightSlider->labelfont(1);
        mHeightSlider->labelsize(10);
        mHeightSlider->maximum(8);
        mHeightSlider->value(1);
        mHeightSlider->callback((Fl_Callback*)cb_mHeightSlider);
        mHeightSlider->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* mHeightSlider
      { mScaleRoller = new Fl_Roller(184, 341, 108, 16, "scale");
        mScaleRoller->type(1);
        mScaleRoller->box(FL_PLASTIC_THIN_DOWN_BOX);
        mScaleRoller->labelfont(1);
        mScaleRoller->labelsize(10);
        mScaleRoller->maximum(10);
        mScaleRoller->value(0.25);
        mScaleRoller->callback((Fl_Callback*)cb_mScaleRoller);
        mScaleRoller->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Roller* mScaleRoller
      { Fl_Group* o = new Fl_Group(10, 371, 140, 45, "sphere color");
        o->labelfont(1);
        o->labelsize(10);
        { mRedSphereSlider = new Fl_Slider(24, 372, 125, 10, "R");
          mRedSphereSlider->type(5);
          mRedSphereSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mRedSphereSlider->color((Fl_Color)1);
          mRedSphereSlider->labelfont(5);
          mRedSphereSlider->labelsize(12);
          mRedSphereSlider->labelcolor((Fl_Color)1);
          mRedSphereSlider->step(0.01);
          mRedSphereSlider->value(0.8);
          mRedSphereSlider->callback((Fl_Callback*)cb_mRedSphereSlider);
          mRedSphereSlider->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Slider* mRedSphereSlider
        { mGreenSphereSlider = new Fl_Slider(24, 382, 125, 10, "G");
          mGreenSphereSlider->type(5);
          mGreenSphereSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mGreenSphereSlider->color((Fl_Color)2);
          mGreenSphereSlider->labelfont(5);
          mGreenSphereSlider->labelsize(12);
          mGreenSphereSlider->labelcolor((Fl_Color)61);
          mGreenSphereSlider->step(0.01);
          mGreenSphereSlider->value(0.8);
          mGreenSphereSlider->callback((Fl_Callback*)cb_mGreenSphereSlider);
          mGreenSphereSlider->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Slider* mGreenSphereSlider
        { mBlueSphereSlider = new Fl_Slider(24, 392, 125, 10, "B");
          mBlueSphereSlider->type(5);
          mBlueSphereSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mBlueSphereSlider->color((Fl_Color)4);
          mBlueSphereSlider->labelfont(5);
          mBlueSphereSlider->labelsize(12);
          mBlueSphereSlider->labelcolor((Fl_Color)4);
          mBlueSphereSlider->step(0.01);
          mBlueSphereSlider->value(0.4);
          mBlueSphereSlider->callback((Fl_Callback*)cb_mBlueSphereSlider);
          mBlueSphereSlider->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Slider* mBlueSphereSlider
        { mSphereOpacitySlider = new Fl_Slider(24, 402, 125, 10, "A");
          mSphereOpacitySlider->type(5);
          mSphereOpacitySlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mSphereOpacitySlider->color((Fl_Color)24);
          mSphereOpacitySlider->labelfont(5);
          mSphereOpacitySlider->labelsize(12);
          mSphereOpacitySlider->labelcolor((Fl_Color)24);
          mSphereOpacitySlider->step(0.01);
          mSphereOpacitySlider->value(0.66);
          mSphereOpacitySlider->callback((Fl_Callback*)cb_mSphereOpacitySlider);
          mSphereOpacitySlider->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Slider* mSphereOpacitySlider
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(150, 371, 141, 45, "spike color");
        o->labelfont(1);
        o->labelsize(10);
        { mRedSpikeSlider = new Fl_Slider(151, 372, 125, 10, "R");
          mRedSpikeSlider->type(5);
          mRedSpikeSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mRedSpikeSlider->color((Fl_Color)1);
          mRedSpikeSlider->labelfont(5);
          mRedSpikeSlider->labelsize(12);
          mRedSpikeSlider->labelcolor((Fl_Color)1);
          mRedSpikeSlider->step(0.01);
          mRedSpikeSlider->value(0.4);
          mRedSpikeSlider->callback((Fl_Callback*)cb_mRedSpikeSlider);
          mRedSpikeSlider->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Slider* mRedSpikeSlider
        { mGreenSpikeSlider = new Fl_Slider(151, 382, 125, 10, "G");
          mGreenSpikeSlider->type(5);
          mGreenSpikeSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mGreenSpikeSlider->color((Fl_Color)2);
          mGreenSpikeSlider->labelfont(5);
          mGreenSpikeSlider->labelsize(12);
          mGreenSpikeSlider->labelcolor((Fl_Color)61);
          mGreenSpikeSlider->step(0.01);
          mGreenSpikeSlider->value(0.6);
          mGreenSpikeSlider->callback((Fl_Callback*)cb_mGreenSpikeSlider);
          mGreenSpikeSlider->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Slider* mGreenSpikeSlider
        { mBlueSpikeSlider = new Fl_Slider(151, 392, 125, 10, "B");
          mBlueSpikeSlider->type(5);
          mBlueSpikeSlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mBlueSpikeSlider->color((Fl_Color)4);
          mBlueSpikeSlider->labelfont(5);
          mBlueSpikeSlider->labelsize(12);
          mBlueSpikeSlider->labelcolor((Fl_Color)4);
          mBlueSpikeSlider->step(0.01);
          mBlueSpikeSlider->value(0.8);
          mBlueSpikeSlider->callback((Fl_Callback*)cb_mBlueSpikeSlider);
          mBlueSpikeSlider->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Slider* mBlueSpikeSlider
        { mSpikeOpacitySlider = new Fl_Slider(151, 403, 125, 10, "A");
          mSpikeOpacitySlider->type(5);
          mSpikeOpacitySlider->box(FL_PLASTIC_THIN_DOWN_BOX);
          mSpikeOpacitySlider->color((Fl_Color)24);
          mSpikeOpacitySlider->labelfont(5);
          mSpikeOpacitySlider->labelsize(12);
          mSpikeOpacitySlider->labelcolor((Fl_Color)24);
          mSpikeOpacitySlider->step(0.01);
          mSpikeOpacitySlider->value(1);
          mSpikeOpacitySlider->callback((Fl_Callback*)cb_mSpikeOpacitySlider);
          mSpikeOpacitySlider->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Slider* mSpikeOpacitySlider
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    mMaceWindow->set_non_modal();
    mMaceWindow->end();
  } // Fl_Double_Window* mMaceWindow
  //this->mMaceWindow->init_sizes();
  this->SetConeWindow(this->mConeWindow);
  this->SetConeView(this->mConeView);
  this->SetMaceWindow(this->mMaceWindow);
  this->SetMaceView(this->mMaceView);
}

void MorningStarUI::Check(void) {
  Fl::check();
}

void MorningStarUI::ReceiveMaceParam(void) {
  if (this->Mace != NULL) {
    double dtmp;
    int    itmp;
    this->GetThetaResolution(itmp);
    this->mThetaSlider->value(itmp);
    this->GetPhiResolution(itmp);
    this->mPhiSlider->value(itmp);
    this->GetSpikeResolution(itmp);
    this->mResSlider->value(itmp);
    this->GetSpikeRadius(dtmp);
    this->mRadiusSlider->value(dtmp);
    this->GetSpikeHeight(dtmp);
    this->mHeightSlider->value(dtmp);
    this->GetScaleFactor(dtmp);
    this->mScaleRoller->value(dtmp);
    this->SetSphereColor( this->mRedSphereSlider->value(),
                                 this->mGreenSphereSlider->value(),
                                 this->mBlueSphereSlider->value() );
    this->SetSpikeColor( this->mRedSpikeSlider->value(),
                                 this->mBlueSpikeSlider->value(),
                                 this->mBlueSpikeSlider->value() );
    this->SetSphereOpacity(this->mSphereOpacitySlider->value());
    this->SetSpikeOpacity(this->mSpikeOpacitySlider->value());
  }
}

void MorningStarUIDummy(void) {
  // Silences compiler warnings about private destructor and no friends.
}

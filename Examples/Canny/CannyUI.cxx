// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "CannyUI.h"
/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * $Id: CannyUI.fl,v 1.4 2004/05/27 00:14:49 xpxqx Exp $
 *
 * Copyright (c) 2002 - 2004 Sean McInerney
 * All rights reserved.
 *
 * See Copyright.txt or http://vtkfltk.sourceforge.net/Copyright.html
 * for details.
 *
 *    This software is distributed WITHOUT ANY WARRANTY; without even 
 *    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
 *    PURPOSE.  See the above copyright notice for more information.
 *
 */
#include "Fl_VTK_Window.H"
#include "vtkObjectFactory.h"
/* fool fluid */
//vtkCxxRevisionMacro (CannyUI, "$Revision: 1.4 $");
/* fool fluid */
vtkStandardNewMacro (CannyUI);

void CannyUI::cb_mWindow_i(Fl_Double_Window*, void*) {
  exit(0);
}
void CannyUI::cb_mWindow(Fl_Double_Window* o, void* v) {
  ((CannyUI*)(o->user_data()))->cb_mWindow_i(o,v);
}

void CannyUI::cb_1_i(Fl_Button*, void*) {
  exit(0);
}
void CannyUI::cb_1(Fl_Button* o, void* v) {
  ((CannyUI*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

CannyUI::CannyUI() {
  { mWindow = new Fl_Double_Window(300, 330, "Canny");
    mWindow->box(FL_PLASTIC_THIN_DOWN_BOX);
    mWindow->callback((Fl_Callback*)cb_mWindow, (void*)(this));
    mWindow->align(Fl_Align(FL_ALIGN_CENTER));
    { mView = new Fl_VTK_Window(4, 4, 292, 240);
      mView->box(FL_NO_BOX);
      mView->color(FL_BACKGROUND_COLOR);
      mView->selection_color(FL_BACKGROUND_COLOR);
      mView->labeltype(FL_NO_LABEL);
      mView->labelfont(0);
      mView->labelsize(14);
      mView->labelcolor(FL_FOREGROUND_COLOR);
      mView->align(Fl_Align(FL_ALIGN_CENTER));
      mView->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(mView);
    } // Fl_VTK_Window* mView
    { Fl_Group* o = new Fl_Group(4, 248, 292, 78);
      o->box(FL_PLASTIC_UP_BOX);
      o->labeltype(FL_NO_LABEL);
      { mGroup1 = new Fl_Group(8, 252, 210, 48);
        mGroup1->labeltype(FL_NO_LABEL);
        mGroup1->align(Fl_Align(FL_ALIGN_CENTER));
        { Fl_Value_Input* o = new Fl_Value_Input(68, 252, 36, 24, "line width");
          o->tooltip("line width");
          o->box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(12);
          o->maximum(32);
          o->step(0.1);
          o->value(1);
          o->textfont(5);
          o->textsize(12);
          o->callback((Fl_Callback*)CannyLineWidthCb, (void*)(this));
          o->when(FL_WHEN_RELEASE);
        } // Fl_Value_Input* o
        { Fl_Value_Input* o = new Fl_Value_Input(68, 276, 36, 24, "smoothing");
          o->tooltip("gaussian smoothing radius factor");
          o->box(FL_PLASTIC_DOWN_BOX);
          o->labelsize(12);
          o->maximum(10);
          o->step(0.5);
          o->value(0.5);
          o->textfont(5);
          o->textsize(12);
          o->callback((Fl_Callback*)CannySmoothingRadiusFactorCb, (void*)(this));
          o->align(Fl_Align(132));
          o->when(FL_WHEN_RELEASE);
        } // Fl_Value_Input* o
        { Fl_Button* o = new Fl_Button(106, 252, 24, 24, "fg");
          o->tooltip("foreground color");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color(FL_GRAY0);
          o->selection_color((Fl_Color)10);
          o->labelfont(5);
          o->labelsize(12);
          o->labelcolor((Fl_Color)55);
          o->callback((Fl_Callback*)CannyForegroundCb, (void*)(this));
          o->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(106, 276, 24, 24, "bg");
          o->tooltip("background color");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)55);
          o->selection_color((Fl_Color)10);
          o->labelfont(5);
          o->labelsize(12);
          o->labelcolor(FL_GRAY0);
          o->callback((Fl_Callback*)CannyBackgroundCb, (void*)(this));
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(132, 252, 24, 24, "show edgels");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)CannyEdgelVisibilityCb, (void*)(this));
        } // Fl_Check_Button* o
        { Fl_Check_Button* o = new Fl_Check_Button(132, 276, 24, 24, "show image");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)CannyImageVisibilityCb, (void*)(this));
        } // Fl_Check_Button* o
        mGroup1->end();
      } // Fl_Group* mGroup1
      { Fl_Box* o = new Fl_Box(218, 252, 10, 48);
        o->labeltype(FL_NO_LABEL);
        o->hide();
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { mGroup2 = new Fl_Group(228, 252, 64, 48);
        mGroup2->labeltype(FL_NO_LABEL);
        { Fl_Button* o = new Fl_Button(228, 252, 38, 24, "Load");
          o->tooltip("load image");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)2);
          o->selection_color((Fl_Color)10);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)CannyLoadCb, (void*)(this));
          o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(228, 276, 38, 24, "Save");
          o->tooltip("save image / data");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)4);
          o->selection_color((Fl_Color)12);
          o->labelfont(1);
          o->labelsize(12);
          o->callback((Fl_Callback*)CannySaveCb, (void*)(this));
          o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(268, 252, 24, 48, "@#1+");
          o->tooltip("exit");
          o->box(FL_PLASTIC_UP_BOX);
          o->down_box(FL_PLASTIC_DOWN_BOX);
          o->color((Fl_Color)1);
          o->selection_color((Fl_Color)9);
          o->labeltype(FL_EMBOSSED_LABEL);
          o->labelfont(5);
          o->labelsize(17);
          o->callback((Fl_Callback*)cb_1);
          o->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
        } // Fl_Button* o
        mGroup2->end();
      } // Fl_Group* mGroup2
      { Fl_Progress* o = Progress = new Fl_Progress(8, 302, 284, 20, "progress");
        Progress->box(FL_PLASTIC_DOWN_BOX);
        Progress->selection_color((Fl_Color)3);
        Progress->labelsize(12);
        Progress->labelcolor(FL_SELECTION_COLOR);
        o->minimum(0.0);
        o->maximum(1.0);
      } // Fl_Progress* Progress
      o->end();
    } // Fl_Group* o
    mWindow->end();
  } // Fl_Double_Window* mWindow
  this->SetFltkWindow(this->mWindow);
  this->SetVtkWindow(this->mView);
}

Fl_VTK_Window* CannyUI::GetView() {
  return this->mView;
}

void CannyUI::Check(void) {
  Fl::check();
}

void CannyUI::Flush(void) {
  Fl::flush();
}

void CannyUIDummy(void) {
  // Silences compiler warnings about private destructor and no friends.
}

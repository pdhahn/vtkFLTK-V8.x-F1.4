// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "ContourUI.h"
/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * $Id: ContourUI.fl,v 1.7 2004/05/13 18:37:49 xpxqx Exp $
 *
 * Copyright (c) 2002 - 2004 Sean McInerney
 * All rights reserved.
 *
 * See Copyright.txt or http://vtkfltk.sourceforge.net/Copyright.html
 * for details.
 *
 *    This software is distributed WITHOUT ANY WARRANTY; without even 
 *    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
 *    PURPOSE.  See the above copyright notice for more information.
 *
 */
#include "Fl_VTK_Window.H"
#include "vtkObjectFactory.h"
/* fool fluid */
//vtkCxxRevisionMacro (ContourUI, "$Revision: 1.7 $");
/* fool fluid */
vtkStandardNewMacro (ContourUI);

void ContourUI::cb_mWindow_i(Fl_Double_Window*, void*) {
  exit(0);
}
void ContourUI::cb_mWindow(Fl_Double_Window* o, void* v) {
  ((ContourUI*)(o->user_data()))->cb_mWindow_i(o,v);
}

ContourUI::ContourUI() {
  { mWindow = new Fl_Double_Window(260, 325, "Contour View");
    mWindow->color((Fl_Color)16);
    mWindow->callback((Fl_Callback*)cb_mWindow, (void*)(this));
    mWindow->align(Fl_Align(FL_ALIGN_CENTER));
    { Fl_VTK_Window* o = mView = new Fl_VTK_Window(4, 4, 256, 256);
      mView->box(FL_NO_BOX);
      mView->color(FL_BACKGROUND_COLOR);
      mView->selection_color(FL_BACKGROUND_COLOR);
      mView->labeltype(FL_NORMAL_LABEL);
      mView->labelfont(0);
      mView->labelsize(14);
      mView->labelcolor(FL_FOREGROUND_COLOR);
      mView->align(Fl_Align(FL_ALIGN_CENTER));
      mView->when(FL_WHEN_RELEASE);
      o->resizable(*o);
    } // Fl_VTK_Window* mView
    { Fl_Group* o = new Fl_Group(4, 264, 256, 28);
      o->box(FL_PLASTIC_UP_BOX);
      { IsoInput = new Fl_Value_Input(32, 268, 48, 20, "Iso");
        IsoInput->box(FL_PLASTIC_DOWN_BOX);
        IsoInput->labeltype(FL_SHADOW_LABEL);
        IsoInput->labelfont(1);
        IsoInput->maximum(16384);
        IsoInput->step(1);
        IsoInput->value(1250);
        IsoInput->textfont(4);
        IsoInput->callback((Fl_Callback*)IsoInputCb, (void*)(this));
        IsoInput->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* IsoInput
      { ContourToggle = new Fl_Check_Button(82, 268, 20, 20);
        ContourToggle->down_box(FL_PLASTIC_DOWN_BOX);
        ContourToggle->value(1);
        ContourToggle->labeltype(FL_NO_LABEL);
        ContourToggle->callback((Fl_Callback*)ContourToggleCb, (void*)(this));
        ContourToggle->align(Fl_Align(FL_ALIGN_CENTER));
      } // Fl_Check_Button* ContourToggle
      { Fl_Button* o = new Fl_Button(102, 268, 76, 20, "Save series");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->color((Fl_Color)13);
        o->selection_color((Fl_Color)5);
        o->labelsize(12);
        o->callback((Fl_Callback*)SaveSeriesCb, (void*)(this));
        o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(180, 268, 76, 20, "Save image");
        o->box(FL_PLASTIC_UP_BOX);
        o->down_box(FL_PLASTIC_DOWN_BOX);
        o->color((Fl_Color)12);
        o->selection_color((Fl_Color)4);
        o->labelsize(12);
        o->callback((Fl_Callback*)SaveImageCb, (void*)(this));
        o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Box* o = new Fl_Box(2, 2, 260, 260);
      o->labeltype(FL_NO_LABEL);
      o->hide();
      o->deactivate();
      Fl_Group::current()->resizable(o);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(4, 294, 256, 28);
      o->box(FL_PLASTIC_UP_BOX);
      { Fl_Progress* o = Progress = new Fl_Progress(8, 298, 248, 20, "progress");
        Progress->box(FL_PLASTIC_DOWN_BOX);
        Progress->selection_color((Fl_Color)3);
        Progress->labelsize(12);
        Progress->labelcolor(FL_SELECTION_COLOR);
        o->minimum(0.0);
        o->maximum(1.0);
      } // Fl_Progress* Progress
      o->end();
    } // Fl_Group* o
    mWindow->end();
  } // Fl_Double_Window* mWindow
  this->SetFltkWindow(this->mWindow);
  this->SetVtkWindow(this->mView);
}

Fl_VTK_Window* ContourUI::GetView() {
  return this->mView;
}

void ContourUI::Check(void) {
  Fl::check();
}

void ContourUI::InitIsoInput(void) {
  this->IsoInput->value(this->GetContourValue());
  this->Check();
}

void ContourUIDummy(void) {
  // Silences compiler warnings about private destructor and no friends.
}
